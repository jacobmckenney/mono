//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use async_trait::async_trait;
use chrono::Utc;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(unique)]
    pub email: String,
    pub name: Option<String>,
    pub image: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::comment::Entity")]
    Comment,
    #[sea_orm(has_many = "super::group_membership::Entity")]
    GroupMembership,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
    #[sea_orm(has_many = "super::prayer::Entity")]
    Prayer,
    #[sea_orm(has_many = "super::prayer_request::Entity")]
    PrayerRequest,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
}

impl Related<super::comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comment.def()
    }
}

impl Related<super::group_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMembership.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::prayer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Prayer.def()
    }
}

impl Related<super::prayer_request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PrayerRequest.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}
