//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "group")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub r#type: String,
    pub name: String,
    pub image: Option<String>,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group_membership::Entity")]
    GroupMembership,
    #[sea_orm(has_many = "super::message_thread::Entity")]
    MessageThread,
    #[sea_orm(has_many = "super::message_thread_to_group::Entity")]
    MessageThreadToGroup,
    #[sea_orm(has_many = "super::prayer_request_to_group::Entity")]
    PrayerRequestToGroup,
}

impl Related<super::group_membership::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMembership.def()
    }
}

impl Related<super::message_thread::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MessageThread.def()
    }
}

impl Related<super::message_thread_to_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MessageThreadToGroup.def()
    }
}

impl Related<super::prayer_request_to_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PrayerRequestToGroup.def()
    }
}
